<?xml version="1.0"?>

<?xml-stylesheet type="text/xsl" href="xs3p.xsl"?>

<!-- xml document refinition for raphael -->
<!-- @author: sgurin -->
<!-- TODO: 1) allow text, path and style elements contain text -->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://raphaeljs.com" xmlns="http://raphaeljs.com"
	elementFormDefault="qualified">

	<xs:element name="raphael" >
        <xs:annotation>
        	<xs:documentation>raphael is the main element. it contains one or more papers.</xs:documentation>
        </xs:annotation>
		<xs:complexType>
        <xs:complexContent>
			<xs:extension base="BaseType">
			<xs:choice maxOccurs="unbounded">
				<xs:element ref="paper" />
				<xs:element ref="style" />
			</xs:choice>			
			</xs:extension>
		</xs:complexContent>
		</xs:complexType>
	</xs:element>
	
	
	<xs:complexType name="BaseType">
		
	
<!--     <xs:simpleContent> -->
<!--       <xs:extension base="xs:string"> -->
<!--         <xs:annotation><xs:documentation>All raphael objects are suceptible o fhaving and id and class attributes, even sets and papers. </xs:documentation></xs:annotation> -->
<!-- 		<xs:attribute name="id" type="xs:ID"> -->
<!-- 			<xs:annotation><xs:documentation>id of the raphael shape for retrieving it from dictionary and for referencing it in css using #shape1.</xs:documentation></xs:annotation> -->
<!-- 		</xs:attribute> -->
<!-- 		<xs:attribute name="class" type="xs:NMTOKENS"> -->
<!-- 			<xs:annotation><xs:documentation>class of the raphael shape for retrieving it from dictionary and for referencing it in css using .shapeClass1</xs:documentation></xs:annotation> -->
<!-- 		</xs:attribute> -->
<!--       </xs:extension> -->
<!--     </xs:simpleContent> -->
    
    
		<xs:annotation><xs:documentation>All raphael objects are suceptible o fhaving and id and class attributes, even sets and papers. </xs:documentation></xs:annotation>
		<xs:attribute name="id" type="xs:ID">
			<xs:annotation><xs:documentation>id of the raphael shape for retrieving it from dictionary and for referencing it in css using #shape1.</xs:documentation></xs:annotation>
		</xs:attribute>		
		<xs:attribute name="class" type="xs:NMTOKENS">
			<xs:annotation><xs:documentation>class of the raphael shape for retrieving it from dictionary and for referencing it in css using .shapeClass1</xs:documentation></xs:annotation>
		</xs:attribute>
		
		
		
	</xs:complexType>


	<!-- paper type extends BaseType -->
	<xs:element name="paper">
        <xs:annotation>
        	<xs:documentation>a paper contains shapes. it can be related to a html element using the elid attr</xs:documentation>
        </xs:annotation>        
        <xs:complexType mixed="true">
        <xs:complexContent>
			<xs:extension base="BaseType">
			<xs:choice maxOccurs="unbounded">
				<xs:element ref="rect" />
				<xs:element ref="circle" />
				<xs:element ref="set" />
				<xs:element ref="imag" />
				<xs:element ref="ellipse" />
				<xs:element ref="path" />
				<xs:element ref="text" />
				<xs:element ref="print" />
			</xs:choice>
	        <xs:attribute name="containerId" type="xs:string">
				<xs:annotation><xs:documentation>ID of DOM element which is going to be a parent for drawing surface</xs:documentation></xs:annotation>
			</xs:attribute>
			<xs:attribute name="x" type="xs:int">
				<xs:annotation><xs:documentation>x coord of the paper's top-left corner</xs:documentation></xs:annotation>
			</xs:attribute>		
			<xs:attribute name="y" type="xs:int">
				<xs:annotation><xs:documentation>y coord of the paper's top-left corner</xs:documentation></xs:annotation>
			</xs:attribute>		
			<xs:attribute name="width" type="xs:int" use="required">
				<xs:annotation><xs:documentation>width in pixels</xs:documentation></xs:annotation>
			</xs:attribute>		
			<xs:attribute name="height" type="xs:int" use="required">
				<xs:annotation><xs:documentation>height in pixels</xs:documentation></xs:annotation>
			</xs:attribute>				
			</xs:extension>
		</xs:complexContent>
		</xs:complexType>
	</xs:element>


	
	<!-- attrsType extends BaseType -->
	<xs:complexType name="AttrsType">
	
		<xs:complexContent mixed="true">
			<xs:extension base="BaseType">
				<xs:attribute name="arrow-end" type="xs:string">
					<xs:annotation><xs:documentation>
					arrowhead on the end of the path. The format for string is &lt;type>[-&lt;width>[-&lt;length>]]. Possible types: 
					classic, block, open, oval, diamond, none, width: wide, narrow, midium, length: long, short, midium
					.</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="clip-rect" type="xs:string">
					<xs:annotation><xs:documentation>comma or space separated values: x, y, width and height
					.</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="cursor" type="xs:string">
					<xs:annotation><xs:documentation>CSS type of the cursor
					.</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="cx" type="xs:int">
					<xs:annotation><xs:documentation>the x-axis coordinate of the center of the circle, or ellipse</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="cy" type="xs:int">
					<xs:annotation><xs:documentation>the y-axis coordinate of the center of the circle, or ellipse</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="fill" type="xs:string">
					<xs:annotation><xs:documentation>colour, gradient or image
					.</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="fill-opacity" type="xs:float">
					<xs:annotation><xs:documentation></xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="font" type="xs:string">
					<xs:annotation><xs:documentation>
					.</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="font-family" type="xs:string">
					<xs:annotation><xs:documentation>
					.</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="font-size" type="xs:int">
					<xs:annotation><xs:documentation>font size in pixels</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="font-weight" type="xs:string">
					<xs:annotation><xs:documentation>
					.</xs:documentation></xs:annotation>
				</xs:attribute>				
				<xs:attribute name="height" type="xs:int">
					<xs:annotation><xs:documentation>rectangle height</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="href" type="xs:string">
					<xs:annotation><xs:documentation>URL, if specified element behaves as hyperlink
					.</xs:documentation></xs:annotation>
				</xs:attribute>	
				<xs:attribute name="opacity" type="xs:float">
					<xs:annotation><xs:documentation></xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="path" type="xs:string">
					<xs:annotation><xs:documentation>path string in SVG format.</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="r" type="xs:int">
					<xs:annotation><xs:documentation>radius of the circle</xs:documentation></xs:annotation>
				</xs:attribute>				
				<xs:attribute name="rx" type="xs:int">
					<xs:annotation><xs:documentation>horizontal radius</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="ry" type="xs:int">
					<xs:annotation><xs:documentation>vertical radius</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="src" type="xs:string">
					<xs:annotation><xs:documentation>radius for rounded corners, default is 0</xs:documentation></xs:annotation>
				</xs:attribute>				
				<xs:attribute name="stroke" type="xs:string">
					<xs:annotation><xs:documentation>stroke color</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="stroke-dasharray" type="xs:string">
					<xs:annotation><xs:documentation>[“”, “-”, “.”, “-.”, “-..”, “. ”, “- ”, “$#45;$#45;”, “- .”, “$#45;$#45;.”, “$#45;$#45;..”]</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="stroke-linecap" type="xs:string">
					<xs:annotation><xs:documentation>[“butt”, “square”, “round”]</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="stroke-linejoin" type="xs:string">
					<xs:annotation><xs:documentation>[“bevel”, “round”, “miter”]</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="stroke-miterlimit" type="xs:int">
					<xs:annotation><xs:documentation></xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="strke-opacity" type="xs:float">
					<xs:annotation><xs:documentation></xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="stroke-width" type="xs:int">
					<xs:annotation><xs:documentation>stroke width in pixels, default is 1</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="target" type="xs:string">
					<xs:annotation><xs:documentation>used with href</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="text" type="xs:string">
					<xs:annotation><xs:documentation>contents of the text element. Use \n for multiline text</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="text-anchor" type="xs:string">
					<xs:annotation><xs:documentation>[“start”, “middle”, “end”], default is “middle”</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="text-title" type="xs:string">
					<xs:annotation><xs:documentation>will create tooltip with a given text</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="transform" type="xs:string">
					<xs:annotation><xs:documentation>
Adds transformation to the element which is separate to other attributes, i.e. translation doesn’t change x or y of the rectange. The format of transformation string is similar to the path string syntax:

"t100,100r30,100,100s2,2,100,100r45s1.5"

Each letter is a command. There are four commands: t is for translate, r is for rotate, s is for scale and m is for matrix.

There are also alternative “absolute” translation, rotation and scale: T, R and S. They will not take previous transformation into account. For example, ...T100,0 will always move element 100 px horisontally, while ...t100,0 could move it vertically if there is r90 before. Just compare results of r90t100,0 and r90T100,0.

So, the example line above could be read like “translate by 100, 100; rotate 30° around 100, 100; scale twice around 100, 100; rotate 45° around centre; scale 1.5 times relative to centre”. As you can see rotate and scale commands have origin coordinates as optional parameters, the default is the centre point of the element. Matrix accepts six parameters. 
</xs:documentation></xs:annotation>
				</xs:attribute>				
				<xs:attribute name="width" type="xs:int">
					<xs:annotation><xs:documentation>rectangle width</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="x" type="xs:int">
					<xs:annotation><xs:documentation>x coordinate of the top left corner</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="y" type="xs:int">
					<xs:annotation><xs:documentation>y coordinate of the top left corner</xs:documentation></xs:annotation>
				</xs:attribute>
				
				
				
				
			</xs:extension>
		</xs:complexContent>		
		
	</xs:complexType>
	
	<!-- the RectType extends AttrsType but making attributes x,y,width,height mandatory -->
	<xs:complexType name="RectType">		
				
		<xs:complexContent>
		
			<xs:restriction base="AttrsType">
				<xs:attribute name="x" type="xs:int"  use="required">
					<xs:annotation><xs:documentation>x coordinate of the top left corner</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="y" type="xs:int"  use="required">
					<xs:annotation><xs:documentation>y coordinate of the top left corner</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="width" type="xs:int"  use="required">
					<xs:annotation><xs:documentation>rectangle width</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="height" type="xs:int"  use="required">
					<xs:annotation><xs:documentation>rectangle height</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="r" type="xs:int">
					<xs:annotation><xs:documentation>radius for rounded corners, default is 0</xs:documentation></xs:annotation>
				</xs:attribute>
			</xs:restriction>
			
		</xs:complexContent>	
		
	</xs:complexType>
	
	<!-- the CircleType extends AttrsType but making attributes cx, cy, radius mandatory -->
	<xs:complexType name="CircleType">		
				
		<xs:complexContent>
		
			<xs:restriction base="AttrsType">
				<xs:attribute name="cx" type="xs:int"  use="required">
					<xs:annotation><xs:documentation>x coordinate of the centre</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="cy" type="xs:int"  use="required">
					<xs:annotation><xs:documentation>y coordinate of the centre</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="r" type="xs:int" use="required">
					<xs:annotation><xs:documentation>radius of the rounded corners</xs:documentation></xs:annotation>
				</xs:attribute>
			</xs:restriction>
			
		</xs:complexContent>	
		
	</xs:complexType>
	
	<!-- the ImageType extends AttrsType but making attributes x, y, width, height, src mandatory -->
	<xs:complexType name="ImageType">		
				
		<xs:complexContent>
		
			<xs:restriction base="AttrsType">
				<xs:attribute name="x" type="xs:int"  use="required">
					<xs:annotation><xs:documentation>x coordinate of the top left corner</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="y" type="xs:int"  use="required">
					<xs:annotation><xs:documentation>y coordinate of the top left corner</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="width" type="xs:int"  use="required">
					<xs:annotation><xs:documentation>rectangle width</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="height" type="xs:int"  use="required">
					<xs:annotation><xs:documentation>rectangle height</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="src" type="xs:string" use="required">
					<xs:annotation><xs:documentation>radius for rounded corners, default is 0</xs:documentation></xs:annotation>
				</xs:attribute>
			</xs:restriction>
			
		</xs:complexContent>
	</xs:complexType>
	
	
	
		<!-- the RectType extends AttrsType but making attributes x,y,width,height mandatory -->
	<xs:complexType name="TextType">		
				
		<xs:complexContent mixed="true">
		
			<xs:restriction base="AttrsType">
				<xs:attribute name="x" type="xs:int"  use="required">
					<xs:annotation><xs:documentation>x coordinate of the top left corner</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="y" type="xs:int"  use="required">
					<xs:annotation><xs:documentation>y coordinate of the top left corner</xs:documentation></xs:annotation>
				</xs:attribute>
				
			</xs:restriction>
			
		</xs:complexContent>	
		
	</xs:complexType>
	
	
	<xs:complexType name="PrintType">		
				
		<xs:complexContent mixed="true">
			<xs:extension base="TextType">
			
<!-- 				<xs:attribute name="font" type="xs:string"> -->
<!-- 					<xs:annotation><xs:documentation>confon font name -->
<!-- 					 </xs:documentation></xs:annotation> -->
<!-- 				</xs:attribute> -->
				
				<xs:attribute name="letter-spacing" type="xs:float">
					<xs:annotation><xs:documentation>
					number in range -1..1, default is 0 </xs:documentation></xs:annotation>
				</xs:attribute>
				
				<xs:attribute name="origin" type="xs:float">
					<xs:annotation><xs:documentation>
					could be "baseline" or "middle", default is "middle"</xs:documentation></xs:annotation>
				</xs:attribute>
				
				<xs:attribute name="onpath" type="xs:string">
					<xs:annotation><xs:documentation></xs:documentation></xs:annotation>
				</xs:attribute>
				
<!-- 				TODO: origin and letter-spacing should only be specified when font!=null -->
			</xs:extension>
		</xs:complexContent>
		
	</xs:complexType>
	
	
	
	<!-- the EllipseType extends AttrsType but making attributes cx, cy, rx, ry mandatory -->
	<xs:complexType name="EllipseType">		
				
		<xs:complexContent>
		
			<xs:restriction base="AttrsType">
				<xs:attribute name="x" type="xs:int" use="required">
					<xs:annotation><xs:documentation>x coordinate of the centre</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="y" type="xs:int"  use="required">
					<xs:annotation><xs:documentation>y coordinate of the centre</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="rx" type="xs:int" use="required">
					<xs:annotation><xs:documentation>horizontal radius</xs:documentation></xs:annotation>
				</xs:attribute>
				<xs:attribute name="ry" type="xs:int" use="required">
					<xs:annotation><xs:documentation>vertical radius</xs:documentation></xs:annotation>
				</xs:attribute>
			</xs:restriction>
			
		</xs:complexContent>	
		
	</xs:complexType>
	
	
	<!-- the PathType extends AttrsType but making attributes path mandatory -->
	<xs:complexType name="PathType">						
		<xs:complexContent mixed="true">		
			<xs:restriction base="AttrsType">
<!-- 				<xs:attribute name="path" type="xs:string" use="required"> -->
<!-- 					<xs:annotation><xs:documentation>path string in SVG format.</xs:documentation></xs:annotation> -->
<!-- 				</xs:attribute> -->
			</xs:restriction>
			
		</xs:complexContent>	
		
	</xs:complexType>
	
	<!-- the Set type extends AttrsType -->
	<xs:complexType name="SetType" mixed="true">
		<xs:complexContent>
			<xs:extension base="AttrsType">
				<xs:choice maxOccurs="unbounded">
					<xs:element ref="rect" />
					<xs:element ref="circle" />
					<xs:element ref="set" />
					<xs:element ref="imag" />
					<xs:element ref="ellipse" />
					<xs:element ref="path" />
				</xs:choice>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="rect" type="RectType">
	</xs:element>

	<xs:element name="circle" type="CircleType">
	</xs:element>	
	
	<xs:element name="imag" type="ImageType">
	<xs:annotation><xs:documentation>
	raphael image element is named "imag" because both img and image elements are parsed as html elements and cannot be embbeded ni html docs.
	</xs:documentation></xs:annotation>
	</xs:element>
	
	<xs:element name="ellipse" type="EllipseType">
	</xs:element>
	
	<xs:element name="path" type="PathType">
	</xs:element>
	
	<xs:element name="set" type="SetType">
	</xs:element>
	
	<xs:element name="text" type="TextType">
	<xs:annotation><xs:documentation>
	the analogous to call paper.text() in raphael. NATIVE Text that 
	support font-family, font-size and other text. Font family in this case are not cufont font names, 
	but CSS style like arial, courier, "serif", "sans-serif", etc.
	</xs:documentation></xs:annotation>
	</xs:element>
	
	<xs:element name="print" type="PrintType">	
		<xs:annotation><xs:documentation>
	analogous to call paper.print(). attributes, font-family, font-weight and other font related won't work, because 
	this won't be native text, but a raphael set with letters (paths). origin, size, letter-spacing will be available.
	</xs:documentation></xs:annotation>
	</xs:element>
	
	
	<xs:element name="style">
	<xs:annotation><xs:documentation>css style like tag for rapahël attributes.	
	Style element is only valid as &lt;raphael> tag children
	use jquery supported selectors and valid raphaël attribute names as propery names like: 
	
	&lt;raphael>
	
		&lt;paper id="paper1" ...>
			&lt;set class="face1" ...>
				....
			&lt;/set>
		&lt;/paper>
	
		&lt;style>
		#paper1 .face1 .eye {
			stroke-width: 4;
		}
		&lt;/style>
	
	&lt;/raphael>
	</xs:documentation></xs:annotation>
	
	<xs:complexType>
    <xs:simpleContent>
      <xs:extension base="xs:string">
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
	
		</xs:element>


</xs:schema>
